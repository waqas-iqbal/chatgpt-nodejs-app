name: chatgpt-nodejs-app-ci-cd
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  image_name: chatgpt-nodejs-app
  dockerhub_repo: ${{ secrets.DOCKER_USERNAME }}/chatgpt-nodejs-app

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./app
        run: npm install

      - name: Run unit tests and coverage
        working-directory: ./app
        run: npm test
      
      - name: Sonar Scan
        uses: sonarsource/sonarqube-scan-action@v3
        with:
          args: >
            -Dsonar.projectKey=chatgpt-nodejs-app
            -Dsonar.organization=lfx
            -Dsonar.host.url=http://98.88.79.38:9000
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Auto created by GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Set in the repository secrets

  build-scan-and-push:
    runs-on: ubuntu-latest
    needs: test-and-analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Image
        run: |
          docker build -t chatgpt-nodejs-app:latest -f docker/Dockerfile .
          docker tag chatgpt-nodejs-app:latest ${{ secrets.DOCKER_USERNAME }}/chatgpt-nodejs-app:latest

      - name: Scan Filesystem with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'
          output: trivy-fs.txt

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.dockerhub_repo }}:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'
          output: trivy-image.txt

      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: |
            trivy-image.txt
            trivy-fs.txt

      - name: Smoke Test container
        run: |
          docker run -dt -p 3000:3000 --name chatgpt-nodejs-app-test ${{ env.dockerhub_repo }}:latest
          for i in {1..20}; do
            if curl -fsS http://localhost:3000/health; then echo "OK"; exit 0; fi
            sleep 1
          done
          echo "Smoke test failed" && docker logs smoketest && exit 1          
          docker logs chatgpt-nodejs-app-test
          docker stop chatgpt-nodejs-app-test
          docker rm chatgpt-nodejs-app-test

      - name: Push Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/chatgpt-nodejs-app:latest
  

  deploy:
    runs-on: ubuntu-latest
    needs: build-scan-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-eks-cluster --region us-east-1

      - name: Test K8s access
        run: kubectl get nodes

      - name: Deploy Application to EKS
        run: kubectl apply -f k8s/deployment.yml

      - name: Verify Pods
        run: kubectl get pods

      - name: Deploy Service
        run: kubectl apply -f k8s/service.yml

      - name: Verify Service
        run: kubectl get svc